---
title: "Pediatrics AML Proteomics"
author: "Sebastian Wolf"
date: today
lightbox: auto
format:
  html:
    toc: true
    toc-depth: 3
    toc-location: left
    toc-title: "Table of Contents"
    code-fold: true
    code-tools: true
    self-contained: true
    html-math-method: katex
    number-sections: true
    number-depth: 3
    theme: flatly
execute:
  echo: false
  warning: false
  message: false
  error: false
  cache: true
---

# Introduction

MS-based global proteomics was performed to profile sorted CD34+ leukemic blasts from pediatric AML bone marrow samples.

# Setup and QC

```{r}
library(tidyverse)
library(janitor)
```

```{r}
ped_aml_proteomics <- readxl::read_excel("../data/ped_aml_proteomics.xlsx", skip = 1) %>% 
  clean_names(parsing_option = 3)
```

```{r}
sample_to_prot_id <- readxl::read_excel("../data/Issa_ped-AML_Samples.xlsx", sheet = "r_formatiert", col_names = c("prot_id", "volume", "tmt", "plex", "plex_id", "sample_id"))
```

```{r}
sample_metadata <- readxl::read_excel("../data/Issa-H_pÃ¤d-AML_23-07-10_Protein samples_Batch 1.xlsx", sheet = "r_formatiert", col_names = c("sample_id", "cell_number", "volume", "aml_subtype")) %>% 
  clean_names()
```

```{r}
metadata <- left_join(sample_to_prot_id, sample_metadata, by=c("sample_id")) %>% 
  dplyr::relocate(sample_id, .after = prot_id) %>% 
  dplyr::rename("volume_proteomics" = "volume.x", "volume_cells" = "volume.y")

```

```{r}
# match proteomics names to proteomics ids

tibble(prot_names = colnames(ped_aml_proteomics)[stringr::str_starts(colnames(ped_aml_proteomics), "x")]) %>% 
  mutate(replicate = stringr::str_extract(prot_names, "r\\d")) %>% 
  bind_cols(sample_id = rep(metadata$sample_id, 2)) %>% 
  mutate(prot_names_new = paste(sample_id, replicate, sep = "_")) -> corrected_names

ped_aml_proteomics %>% 
  dplyr::select(uniprot_ids : x10_r2_598) %>% 
  magrittr::set_colnames(c("uniprot_ids", "gene_names", corrected_names$prot_names_new)) -> ped_aml_proteomics
```

```{r}
# extract only first uniprotid and try to identify missing gene names

ped_aml_proteomics %>% 
  mutate(across(.cols = c(uniprot_ids, gene_names), ~ stringr::str_extract(., ".*?(?=;|$)"))) -> ped_aml_proteomics

# manual lookup

c("P0DP25" = "CALM3", "P0DPI2" = "GATD3", "P0DOY3" = "IGLC3", "Q6ZSR9" = "FLJ45252", "P0DPB6" = "POLR1D") -> gene_names_lookup

ped_aml_proteomics %>% 
  mutate(gene_names = ifelse(is.na(gene_names), gene_names_lookup[uniprot_ids], gene_names)) -> ped_aml_proteomics

# we have duplicates in HLA which we will simply mean aggregate


ped_aml_proteomics %>% 
  pivot_longer(cols = c(-uniprot_ids, -gene_names), names_to = "sample", values_to ="value") %>% 
  # we also need to mutate the values to double
  mutate(value = as.numeric(value)) %>% 
  summarize(value = mean(value, na.rm = T), .by=c(gene_names, sample)) -> ped_aml_proteomics

# log2 transform 
ped_aml_proteomics %>% 
  mutate(value = log2(value)) -> ped_aml_proteomics

```

## Sample-wise intensity distribution

```{r}
#| label: sample_wise_intensity
#| fig-cap: "Sample-wise intensity distribution"
#| fig-width: 7
#| fig-height: 5

ped_aml_proteomics %>% 
  mutate(sample_id = stringr::str_remove(sample, "_r1|_r2")) %>% 
  left_join(dplyr::select(metadata, sample_id, plex), by="sample_id") %>% 
  mutate(sample = fct_reorder(sample, plex)) %>% 
  ggplot(aes(x=sample, y = value, fill = as.factor(plex))) +
  geom_boxplot(outlier.color = NA) +
  cowplot::theme_cowplot() +
  theme(legend.position = "right",
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank()) +
  scale_fill_discrete(name = "plex") -> intensities_I

ped_aml_proteomics %>% 
  mutate(sample_id = stringr::str_remove(sample, "_r1|_r2")) %>% 
  left_join(dplyr::select(metadata, sample_id, plex), by="sample_id") %>% 
  mutate(sample = fct_reorder(sample, plex)) %>% 
  ggplot(aes(x= value, col = as.factor(plex))) +
  geom_density() +
  cowplot::theme_cowplot() +
  theme(legend.position = "right",
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank()) +
  scale_colour_discrete(name = "plex") -> intensities_II

cowplot::plot_grid(intensities_I, intensities_II, nrow = 2)

```


## Pattern of Missingness

```{r}
ped_aml_proteomics %>% 
  pivot_wider(id_cols = c(gene_names), names_from = "sample", values_from = "value") %>% 
  column_to_rownames("gene_names") %>% 
  as.matrix() %>% 
  is.na() %>% 
  matrixStats::rowSums2() -> missing_samples_per_protein

ped_aml_proteomics %>% 
  pivot_wider(id_cols = c(gene_names), names_from = "sample", values_from = "value") %>% 
  column_to_rownames("gene_names") %>% 
  as.matrix() %>% 
  is.na() %>% 
  matrixStats::colSums2() -> missing_proteins_per_sample
```

```{r}
#| label: missingness
#| fig-cap: "Pattern of Missingness"
#| fig-width: 5
#| fig-height: 3

missing_samples_per_protein %>% 
  as_tibble(rownames = "gene_names") %>% 
  {
    ggplot(., aes(x=value)) +
      geom_histogram(col = "black") +
      geom_vline(xintercept = mean(.$value)) +
      labs(subtitle = paste("mean number of missing \nsamples per protein is ", round(mean(.$value),2))) +
      cowplot::theme_cowplot()
    } -> missing_sample_per_protein_plot


missing_proteins_per_sample %>% 
  as_tibble(rownames = "sample") %>% 
  {
    ggplot(., aes(x=value)) +
      geom_histogram(col = "black") +
      geom_vline(xintercept = mean(.$value)) +
      labs(subtitle = paste("mean number of missing \nproteins per sample is ", round(mean(.$value),2))) +
      cowplot::theme_cowplot()
    } -> missing_protein_per_sample_plot

cowplot::plot_grid(missing_sample_per_protein_plot, missing_protein_per_sample_plot)
```

We remove any proteins which have missing quantifications in more than 50% of samples (this is `r length(missing_samples_per_protein[missing_samples_per_protein > 0.5*126])` proteins) and any samples which have less than 70% proteins quantified (none).

```{r}
#missing_samples_per_protein[missing_samples_per_protein > 0.5*126] 

ped_aml_proteomics %>% 
  filter(!gene_names %in% names(missing_samples_per_protein[missing_samples_per_protein > 0.5*126])) %>% 
  mutate(value = ifelse(is.nan(value), NA_integer_, value)) -> ped_aml_proteomics
```


```{r}
ped_aml_proteomics %>% 
  mutate(value = is.na(value)) %>% 
  summarize(is_na = sum(!value), .by=sample) %>% 
  summarize(is_na_mean = mean(is_na)) %>% 
  pull(is_na_mean) -> is_na_mean
```


After removing lowly covered proteins we have an average coverage of `r is_na_mean` which is generally lower than expected for TMT (~6-8k per sample). 

## PCA plot

```{r}
#| label: pca_plots
#| fig-cap: "PCA plots"
#| fig-width: 8
#| fig-height: 6

ped_aml_proteomics %>% 
  pivot_wider(id_cols = c(gene_names), names_from = "sample", values_from = "value") %>% 
  column_to_rownames("gene_names") %>% 
  as.matrix() %>% 
  t() %>% 
  pcaMethods::pca() %>% 
  pcaMethods::scores() %>% 
  as_tibble(rownames = "sample") %>% 
  mutate(sample_id = stringr::str_remove(sample, "_r1|_r2")) %>% 
  left_join(dplyr::select(metadata, sample_id, plex), by="sample_id") %>% 
  ggplot(aes(x=PC1, y = PC2, col = as.factor(plex))) +
  geom_point() +
  cowplot::theme_cowplot() +
  scale_colour_discrete(name = "plex") +
  ggtitle("PCA per plex") -> pca_per_plex

ped_aml_proteomics %>% 
  pivot_wider(id_cols = c(gene_names), names_from = "sample", values_from = "value") %>% 
  column_to_rownames("gene_names") %>% 
  as.matrix() %>% 
  t() %>% 
  pcaMethods::pca() %>% 
  pcaMethods::scores() %>% 
  as_tibble(rownames = "sample") %>% 
  mutate(sample_id = stringr::str_remove(sample, "_r1|_r2")) %>% 
  left_join(dplyr::select(metadata, sample_id, plex), by="sample_id") %>% 
  ggplot(aes(x=PC1, y = PC2, col = sample_id, group = sample_id)) +
  geom_point() +
  cowplot::theme_cowplot() +
  scale_colour_discrete(name = "plex") +
  theme(legend.position = "none") +
  geom_line(aes(group = sample_id)) +
  ggtitle("PCA per sample replicate") -> pca_per_sample_replicate

ped_aml_proteomics %>% 
  pivot_wider(id_cols = c(gene_names), names_from = "sample", values_from = "value") %>% 
  column_to_rownames("gene_names") %>% 
  as.matrix() %>% 
  t() %>% 
  pcaMethods::pca() %>% 
  pcaMethods::scores() %>% 
  as_tibble(rownames = "sample") %>% 
  mutate(sample_id = stringr::str_remove(sample, "_r1|_r2")) %>% 
  left_join(dplyr::select(metadata, sample_id, plex, cell_number, aml_subtype), by="sample_id") %>% 
  mutate(cell_number = as.numeric(cell_number)) %>%  
  ggplot(aes(x=PC1, y = PC2, col = cell_number)) +
  geom_point() +
  cowplot::theme_cowplot() +
  scale_colour_continuous(name = "cell number") +
  ggtitle("PCA per cell number") -> pca_cell_number

ped_aml_proteomics %>% 
  pivot_wider(id_cols = c(gene_names), names_from = "sample", values_from = "value") %>% 
  column_to_rownames("gene_names") %>% 
  as.matrix() %>% 
  t() %>% 
  pcaMethods::pca() %>% 
  pcaMethods::scores() %>% 
  as_tibble(rownames = "sample") %>% 
  mutate(sample_id = stringr::str_remove(sample, "_r1|_r2")) %>% 
  left_join(dplyr::select(metadata, sample_id, plex, cell_number, aml_subtype), by="sample_id") %>% 
  mutate(aml_subtype = as.factor(aml_subtype)) %>%  
  ggplot(aes(x=PC1, y = PC2, col = aml_subtype)) +
  geom_point() +
  cowplot::theme_cowplot() +
  scale_colour_discrete(name = "Subtype") +
  ggtitle("PCA per subtype") -> pca_per_subtype

cowplot::plot_grid(pca_per_plex, pca_per_sample_replicate, pca_cell_number, pca_per_subtype)
```

## Correlation heatmap

```{r}
#| fig-cap: "Correlation heatmap"
#| label: correlation_heatmap
#| fig-width: 10
#| fig-height: 10
ped_aml_proteomics %>% 
  pivot_wider(id_cols = c(gene_names), names_from = "sample", values_from = "value") %>% 
  column_to_rownames("gene_names") %>% 
  as.matrix() %>% 
  cor(use = "pairwise.complete.obs") %>% 
  ComplexHeatmap::Heatmap(column_dend_reorder = F, row_dend_reorder = F)
```

The correlation heatmap confirms a good between-replicate correlation for most of the samples.

And between replicate correlation coefficients

```{r}
#| label: corr_coefficients
#| fig-cap: "Between-replicate correlation coefficients"
#| fig-width: 4
#| fig-height: 6


ped_aml_proteomics %>% 
  mutate(sample_id = stringr::str_remove(sample, "_r1|_r2")) %>% 
  nest_by(sample_id) %>% 
  mutate(data = list(
    data %>% 
      pivot_wider(id_cols = gene_names, names_from = "sample", values_from = "value") %>% 
      column_to_rownames("gene_names") %>% 
      as.matrix() %>% 
      cor(use = "pairwise.complete.obs", method = "spearman") %>% 
      .[[2]] 
  ) %>% unlist()) %>% 
  ggplot(aes(x=fct_reorder(sample_id, data), y = data)) +
   geom_point() +
  cowplot::theme_cowplot() +
  coord_flip() +
  labs(x="", y = "correlation coefficient")
```

again quite good and no need to discard any replicate.

## Replicate aggregation

We aggregate the replicates by averaging the intensities.

```{r}
ped_aml_proteomics %>% 
  mutate(sample_id = stringr::str_remove(sample, "_r1|_r2")) %>% 
  summarize(value = mean(value, na.rm = T), .by = c(sample_id, gene_names)) -> ped_aml_proteomics


ped_aml_proteomics %>% 
  mutate(sample_id = paste("sample", sample_id,sep = "_")) -> ped_aml_proteomics
```

# Exploration

## Clustering

### PCA

```{r}
ped_aml_proteomics %>%  
  pivot_wider(id_cols = c(gene_names), names_from = "sample_id", values_from = "value") %>% 
  column_to_rownames("gene_names") %>% 
  as.matrix()  %>% 
  is.na() %>%
  matrixStats::rowSums2() %>% 
  sort(decreasing = T) -> missing_samples_per_protein_after_aggr

```

```{r}
#| fig-cap: "PCA plot subtype"
#| label: pca_subtype

ped_aml_proteomics %>% 
  mutate(value = ifelse(is.nan(value), NA_integer_, value)) -> ped_aml_proteomics

ped_aml_proteomics %>% 
  pivot_wider(id_cols = "gene_names", values_from = "value", names_from = "sample_id") %>% 
  column_to_rownames("gene_names") %>% 
  as.matrix() %>% 
  t() %>% 
  pcaMethods::pca() %>% 
  pcaMethods::scores() %>% 
  as_tibble(rownames = "sample_id") %>% 
  left_join(mutate(metadata, sample_id = paste("sample", sample_id, sep = "_")), by=c("sample_id")) %>% 
  mutate(aml_subtype = as.factor(aml_subtype)) %>% 
  ggplot(aes(PC1, PC2, col = aml_subtype)) + 
  geom_point() +
  cowplot::theme_cowplot()
```
As we can see in the PCA plot, there is no apparent clustering based on the different AML subtypes. 

### UMAP

We use an alternative non-linear visualization via UMAP; since UMAP isn't inherently able to handle missing values, we perform an knn imputation first

```{r}
#| output: false

ped_aml_proteomics %>% 
  pivot_wider(id_cols = "gene_names", values_from = "value", names_from = "sample_id") %>% 
  column_to_rownames("gene_names") %>% 
  as.matrix() %>%
  impute::impute.knn() %>% 
  .$data %>% 
  t() %>% 
  umap::umap() -> umap.out
```


```{r}
#| fig-cap: "UMAP visualization"
#| label: umap
umap.out$layout %>% 
  as_tibble(rownames = "sample_id") %>% 
  left_join(mutate(metadata, sample_id = paste("sample", sample_id, sep = "_")), by=c("sample_id")) %>% 
  mutate(aml_subtype = as.factor(aml_subtype)) %>% 
  ggplot(aes(V1, V2, col = aml_subtype)) + 
  geom_point() +
  cowplot::theme_cowplot() +
  labs(x = "UMAP 1", y = "UMAP 2")
```

### Distance Heatmap

We can try to do an unbiased clustering on the euclidean inter-sample distances

We first identify the "optimal" number of clusters k with the ConsensusClustering method


```{r}
#| output: false

library(ConsensusClusterPlus)

ped_aml_proteomics %>% 
  pivot_wider(id_cols = "gene_names", values_from = "value", names_from = "sample_id") %>% 
  column_to_rownames("gene_names") %>% 
  as.matrix() %>% 
  t() %>% 
  dist() %>% 
  as.matrix() %>% 
  ConsensusClusterPlus::ConsensusClusterPlus(maxK = 8, innerLinkage = "ward.D2") %>% 
  ConsensusClusterPlus::calcICL()
```

which identifies 6 distinct clusters as optimal

```{r}
#| label: distance_heatmap
#| fig-cap: "Distance Heatmap"
#| fig-width: 12
#| fig-height: 10

library(ComplexHeatmap)

metadata %>% 
  mutate(sample_id = paste("sample_", sample_id, sep = "_")) %>% 
  dplyr::select(aml_subtype) %>% 
  HeatmapAnnotation(df = .) -> heatmap_anno

ped_aml_proteomics %>% 
  pivot_wider(id_cols = "gene_names", values_from = "value", names_from = "sample_id") %>% 
  column_to_rownames("gene_names") %>% 
  as.matrix() %>% 
  t() %>% 
  dist() %>% 
  hclust(method = "ward.D2") %>% 
  cutree(k = 6) -> sample_clustering

ped_aml_proteomics %>% 
  pivot_wider(id_cols = "gene_names", values_from = "value", names_from = "sample_id") %>% 
  column_to_rownames("gene_names") %>% 
  as.matrix() %>% 
  t() %>% 
  dist() %>% 
  as.matrix() %>% 
  Heatmap(top_annotation = heatmap_anno, column_split = sample_clustering, cluster_column_slices = T, cluster_columns = F, row_split = sample_clustering, cluster_rows = F, cluster_row_slices = T)
```

While the majority of clusters appears to mix together different AML subtypes, cluster 1 is clearly enriched for TAM subtype while the small cluster 6 identifies 2 of the 3 healthy control samples. Also for cluster 3 one could assume a certain bias towards MLLr AML samples. 

We can test statistical correlations between AML subtypes and clusters

```{r}
sample_clustering %>%
  as_tibble(rownames = "sample_id") %>% 
  dplyr::rename("cluster" = "value") %>% 
  left_join(mutate(metadata, sample_id = paste0("sample_", sample_id)), by=c("sample_id")) -> cluster_df_fisher 
  
AML_subtypes <- distinct(cluster_df_fisher, aml_subtype)$aml_subtype

test_subtype <- function(subtype, cluster) {
  table(cluster_df_fisher$cluster == cluster, cluster_df_fisher$aml_subtype == subtype) %>% 
    rstatix::fisher_test() -> fisher.out
    return(
      tibble("subtype" = subtype, "cluster" = cluster, "p" = fisher.out$p)
    )
}

map_df(1:6, function(cluster){
  map(AML_subtypes, function(aml_subtype){
    test_subtype(subtype = aml_subtype, cluster = cluster)
  })
}) %>% 
  arrange(p) %>% 
  DT::datatable(filter = "top", options = list(autoWidth = F, scrollX = T), class = "compact hover row-border stripe dt-left cell-border nowrap")

```


### GO Enrichments

For this we perform a simple over representation analysis in the one-versus-all cluster definition with GO terms

```{r}
#| output: false
library(limma)

# create cluste df for the limma model matrix
metadata %>% 
  dplyr::select(sample_id) %>% 
  mutate(sample_id = paste("sample", sample_id, sep = "_")) %>% 
  bind_cols(cluster = sample_clustering) -> cluster_df


# simple vectorized DE function to test one-vs-all clusters
test_clusters <- memoise::memoise(function(n, cluster_df, proteomics_data)
  {
  # build the model matrix 
  mm <- model.matrix(~ 0 + as.factor(cluster_df$cluster == n))
  # define the contrast
  colnames(mm) <- c("not_in_clus", "in_clus")
  cm <- makeContrasts(in_clus - not_in_clus, levels = mm)
  
  # reshapeinto wide matrix and run limma workflow
  ped_aml_proteomics %>% 
  pivot_wider(id_cols = "gene_names", values_from = "value", names_from = "sample_id") %>% 
  column_to_rownames("gene_names") %>% 
  as.matrix() %>% 
    lmFit(mm) %>% 
    contrasts.fit(cm) %>% 
    eBayes() %>% 
    topTable(number = Inf) %>% 
    as_tibble(rownames = "gene") %>% 
    # extract the significantly upregulated (logFC >0) genes per cluster
    filter(adj.P.Val <= 0.05 & logFC > 0 ) %>% 
    pull(gene)
})

de_upregulated_genes <- map(1:6, ~ test_clusters(.x, cluster_df, ped_aml_proteomics))


# clusterProfiler::compareClusters() works with EntrezID - map first using bitr
memoise::memoise(map(de_upregulated_genes, ~ clusterProfiler::bitr(geneID = .x, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = "org.Hs.eg.db") %>% 
      pull(ENTREZID)) %>% 
  magrittr::set_names(paste("Cluster_", 1:6)) %>% 
  clusterProfiler::compareCluster(geneClusters = ., 
                                  OrgDb = "org.Hs.eg.db", 
                                  ont = "ALL") -> cluster_comparison_de_up)
```


```{r}
#| fig-width: 10
#| fig-height: 18
enrichplot::dotplot(cluster_comparison_de_up, showCategory = 10)
```
```{r}
#| fig-width: 12
#| fig-height: 12


enrichplot::pairwise_termsim(cluster_comparison_de_up) %>% 
  enrichplot::emapplot(cex.params = list(line = 0.15))
```

```{r}
library(clusterProfiler)
library(DT)
library(dplyr)

# Assuming your compareCluster results are stored in 'ck'
# Convert the results to a more usable format
process_cluster_results <- function(ck) {
  as_tibble(ck) %>%
    dplyr::select(Cluster, ID, Description, GeneRatio, BgRatio, pvalue, p.adjust, qvalue, geneID) %>%
    split(.$Cluster)
}

# Function to create a formatted datatable
create_cluster_table <- function(cluster_df) {
  datatable(
    cluster_df %>% dplyr::select(-Cluster),
    extensions = 'Buttons',
    filter = "top", 
    class = "compact hover row-border stripe dt-left cell-border nowrap",
    options = list(
      pageLength = 10,
      dom = 'Bfrtip',
      buttons = c('copy', 'csv', 'excel'),
      scrollX = TRUE,
      autoWidth = F
    )
  )
}

cluster_results <- process_cluster_results(cluster_comparison_de_up)
```

Find here the detailed ORA report of the significantly up-regulated one-vs-all GO terms

::: {.panel-tabset}

## Cluster 1
```{r}
create_cluster_table(cluster_results[[1]])
```

## Cluster 2
```{r}
create_cluster_table(cluster_results[[2]])
```

## Cluster 3
```{r}
create_cluster_table(cluster_results[[3]])
```

## Cluster 4
```{r}
create_cluster_table(cluster_results[[4]])
```

## Cluster 5
```{r}
create_cluster_table(cluster_results[[5]])
```

## Cluster 6
```{r}
create_cluster_table(cluster_results[[6]])
```

:::

### Reactome Enrichments

We also perform REACTOME pathway enrichments

```{r}
#| output: false

# clusterProfiler::compareClusters() works with EntrezID - map first using bitr
memoise::memoise(map(de_upregulated_genes, ~ clusterProfiler::bitr(geneID = .x, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = "org.Hs.eg.db") %>% 
      pull(ENTREZID)) %>% 
  magrittr::set_names(paste("Cluster_", 1:6)) %>% 
  clusterProfiler::compareCluster(geneClusters = ., 
                                  fun = "enrichPathway") -> cluster_comparison_de_up_reactome)
```
```{r}
#| fig-width: 10
#| fig-height: 18
enrichplot::dotplot(cluster_comparison_de_up_reactome, showCategory = 10)
```

```{r}
#| fig-width: 12
#| fig-height: 12


enrichplot::pairwise_termsim(cluster_comparison_de_up_reactome) %>% 
  enrichplot::emapplot(cex.params = list(line = 0.15))
```

```{r}

cluster_results <- process_cluster_results(cluster_comparison_de_up_reactome)
```

::: {.panel-tabset}

## Cluster 1
```{r}
create_cluster_table(cluster_results[[1]])
```

## Cluster 2
```{r}
create_cluster_table(cluster_results[[2]])
```

## Cluster 3
```{r}
create_cluster_table(cluster_results[[3]])
```

## Cluster 4
```{r}
create_cluster_table(cluster_results[[4]])
```

## Cluster 5
```{r}
create_cluster_table(cluster_results[[5]])
```

## Cluster 6
```{r}
create_cluster_table(cluster_results[[6]])
```

:::
